本周主要学习了语言的分类、产生式、编程语言的性质和设计方式、常用的JS类型等等。
其中BNF产生式属于比较难理解的一部分，在设计各种关联产生式的时候有种写递归式的感觉。
在JS的各种类型中，Number类型要小心浮点数“精度”的陷阱；String类型要知道各种编码之间的区别于联系；Null和Undefined要注意区分；Object类型属于JS的精髓，要重点掌握，如class和prototype的用法；Symbol类型属于我基本没有使用过的类型，要额外学习一下。
在我之前的学习中，有一句话让我印象深刻---“JS万物皆是对象”。在JS是基于对象还是面向对象的问题上，参考网络：
面向对象的三大特点（封装，继承，多态） 缺一不可。通常“基于对象”是使用对象，但是无法利用现有的对象模板产生新的对象类型，继而产生新的对象，也就是说“基于对象”没有继承的特点。而“多态 ”表示为父类类型的子类对象实例，没有了继承的概念也就无从谈论“多态”。现在的很多流行技术都是基于对象的，它们使用一些封装好的对象，调用对象的方 法，设置对象的属性。但是它们无法让程序员派生新对象类型。他们只能使用现有对象的方法和属性。所以当你判断一个新的技术是否是面向对象的时候，通常可以 使用后两个特性来加以判断。“面向对象”和“基于对象”都实现了“封装”的概念，但是面向对象实现了“继承和多态”，而“基于对象”没有实现这些，的确很 饶口。
从事面向对象编程的人按照分工来说，可以分为“类库的创建者”和“类库的使用者”。使用类库的人并不都是具备了面向对象思想的人，通常知道如何继承和派生 新对象就可以使用类库了，然而我们的思维并没有真正的转过来，使用类库只是在形式上是面向对象，而实质上只是库函数的一种扩展。
面向对象是一种思想，是我们考虑事情的方法，通常表现为我们是将问题的解决按照过程方式来解决呢，还是将问题抽象为一个对象来解决它。很多情况下，我们会 不知不觉的按照过程方式来解决它，而不是考虑将要解决问题抽象为对象去解决它。有些人打着面向对象的幌子，干着过程编程的勾当。